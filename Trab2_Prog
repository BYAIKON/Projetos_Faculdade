#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct Livro {
    int id;
    char titulo[100];
    char autor[50];
    int anoPublicacao;
    int qtdade;
    int qtdisponivel;
    struct Livro *prox;
} Livro;

typedef struct Exemplar {
    int id;
    char titulo[100];
    char autor[50];
    int RGA;
    struct Exemplar *prox;
} Exemplar;

void busca_insere(int ident, char* title, char* author, int ano, int quantidade, Livro **lst) {
    Livro *p, *q, *nova;

    nova = (Livro *) malloc(sizeof (Livro));
    nova->id = ident;
    strncpy(nova->titulo, title, sizeof(nova->titulo));
    strncpy(nova->autor, author, sizeof(nova->autor));
    nova->anoPublicacao = ano;
    nova->qtdade = quantidade;
    nova->qtdisponivel = quantidade;
    p = *lst;
    q = p->prox;

    while (q != NULL && q->id != ident) {
        p = q;
        q = q->prox;
    }

    if (q != NULL && q->id == ident) {
        q->qtdade++;
        q->qtdisponivel++;
    }

    else{
        nova->prox = NULL;
        p->prox = nova;
    }
}
Exemplar* emprestar_Livro(Livro* listaLivros, Exemplar* listaEmprestados, int idLivro, int rga) {
    Livro* aux = listaLivros;
    while(aux->id != idLivro && aux->prox){
        aux = aux->prox;
    }
    if(aux &&  aux->qtdisponivel > 0){
        aux->qtdisponivel -= 1;
        Exemplar* novoExemplar = malloc(sizeof(Exemplar));
        if (!novoExemplar) {
            printf("Erro ao alocar memória para o novo exemplar\n");
            exit(EXIT_FAILURE);
        }

        novoExemplar->id = idLivro;
        novoExemplar->RGA = RGA;
        strcpy(novoExemplar->titulo, aux->titulo);
        strcpy(novoExemplar->autor, aux->autor);


        novoExemplar->prox = listaEmprestados;

        listaEmprestados = novoExemplar;
    } else {
        printf("Livro Não Existente ou Indisponível\n");
    }

    return listaEmprestados;
}
Exemplar* devolucao_Livro(Exemplar* listaEmprestados, int idLivro){
    
    
};




void imprimir_livro(Livro *lst){
    Livro *p;

    for (p = lst; p != NULL; p = p->prox)
        printf("%d \"%s\" \"%s\" %d %d\n", p->id, p->titulo, p->autor, p->anoPublicacao, p->qtdade);
}
imprimirLivrosEmprestimo()


int main(void) {
    Livro* Livros;
    Livros = (Livro *) malloc(sizeof (Livro));
    Livros->prox = NULL;
    Livro book;
    
    Exemplar* Emprestimo;
    Emprestimo = (Exemplar *) malloc(sizeof (Exemplar));
    Emprestimo->prox = NULL;

    char comand;

     // Espaço antes do %c para ignorar espaços em branco

    
    do{
        printf("\n\tA - Adicionar um livro à biblioteca\n\tR - Remover um exemplar de livro da biblioteca\n\tP - Imprimir a lista de livros na biblioteca\n\tE - Empréstimo de um exemplar\n\tD - Devolução de um exemplar\n\tI - Imprimir a lista de livros da biblioteca que estão emprestados\n\tS - Sair do programa\n\t");
        printf("\n\t");
        scanf(" %c", &comand); 
        switch (comand) {
            case 'A':
                scanf("%d \"%99[^\"]\" \"%49[^\"]\" %d %d\n", &book.id, book.titulo, book.autor, &book.anoPublicacao, &book.qtdade);
                busca_insere(book.id, book.titulo, book.autor, book.anoPublicacao, book.qtdade, &Livros);
                break;
            // Resto do código aqui
            case 'P':
                imprimir_livro(Livros->prox);
                break;
            case 'E': {
                int idLivro, RGA;
                scanf("%d %d", &idLV, &RGA);
                Emprestimo = emprestar_Livro(Livros, Emprestimo, idLV, RGA);
                break;
            }
            case 'D': {
                int idLivro;
                scanf("%d", &idLivro);
                Emprestimo = devolucao_Livro(Emprestimo, idLivro);
                break;
            }
            case 'I':
                imprimirLivrosEmprestimo(Emprestimo);
                break;
        }
    }while(comand != 'S');
    

    return 0;
}
